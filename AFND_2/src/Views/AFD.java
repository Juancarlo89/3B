/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import java.util.Map; // Necesario para el tipo de retorno de getSeleccionConTokens
import java.util.AbstractMap; // Necesario para SimpleEntry

/**
 *
 * @author moon1
 */
public class AFD extends javax.swing.JFrame {
    
    /**
     * Creates new form AFD
     */
    
    private DefaultTableModel tableModel;

    public AFD() {
        initComponents();
        configurarTabla(); // Configurar la tabla
        setLocationRelativeTo(null);
        this.setTitle("Convertir AFN a AFD");
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    }

    private void configurarTabla() {
        tableModel = new DefaultTableModel(
            new Object[][]{},
            new String [] {"ID AFN", "Representación", "Token ID", "Seleccionar"}
        ) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case 0: return String.class; // ID AFN
                    case 1: return String.class; // Representación
                    case 2: return String.class; // Token ID (ahora es String, no editable)
                    case 3: return Boolean.class;// Checkbox
                    default: return Object.class;
                }
            }
            @Override
            public boolean isCellEditable(int row, int column) {
                // *** CORRECCIÓN: Solo el checkbox es editable ***
                return column == 3;
            }
        };
        AFD_Table.setModel(tableModel);
        // ... (ajustes de columnas opcionales) ...
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        OKAFD_btn = new javax.swing.JButton();
        OutAFD_btn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AFD_Table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(99, 32, 36));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Sylfaen", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Convertir AFN a AFD");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 60));

        jPanel1.setBackground(new java.awt.Color(232, 221, 221));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        OKAFD_btn.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        OKAFD_btn.setText("Aceptar");
        OKAFD_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        OKAFD_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKAFD_btnActionPerformed(evt);
            }
        });
        jPanel1.add(OKAFD_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 300, -1, -1));

        OutAFD_btn.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        OutAFD_btn.setText("Cancelar");
        OutAFD_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        OutAFD_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutAFD_btnActionPerformed(evt);
            }
        });
        jPanel1.add(OutAFD_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 300, -1, -1));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Seleccione los ANF para la creación del AFD");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        AFD_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Posición", "AFN", "Token", "Selección"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AFD_Table);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 560, 260));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 600, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKAFD_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKAFD_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OKAFD_btnActionPerformed

    private void OutAFD_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutAFD_btnActionPerformed
        /*/ Accion para que el boton de salir funcione
        if(evt.getSource()== OutU_btn){
            dispose(); // Cierra la ventana actual

            Views.MainPage inicio = new Views.MainPage(); // Crea la nueva ventana
            Controlers.Controller controller = new Controlers.Controller(inicio); // Asocia el controlador
            inicio.setVisible(true); // Muestra el MainPage
        }*/
    }//GEN-LAST:event_OutAFD_btnActionPerformed

    public JButton getBotonOK() { return OKAFD_btn; }
    public JButton getBotonCancelar() { return OutAFD_btn; }

    /**
     * Muestra la lista de AFNs. Ahora recibe el token como String.
     * @param data Lista de Object[], { String idAFN, String representacionAFN, String tokenStr }
     */
    public void mostrarListaAFN(List<Object[]> data) {
        tableModel.setRowCount(0); // Limpiar tabla
        if (data != null) {
            for (Object[] rowData : data) {
                // Asegurarse que el array tenga al menos 3 elementos
                if (rowData != null && rowData.length >= 3) {
                     tableModel.addRow(new Object[]{
                         rowData[0],       // ID AFN (String)
                         rowData[1],       // Representación (String)
                         rowData[2],       // Token (String "N/A" o "10, 20")
                         Boolean.FALSE     // Checkbox (desmarcado)
                     });
                }
            }
        }
    }

    /**
     * Recorre la tabla y devuelve una lista de pares (ID del AFN, Token Ingresado)
     * SOLO para las filas que fueron seleccionadas (checkbox marcado).
     * Realiza validación básica para asegurar que se ingresó un token.
     * La conversión del token a entero y validación más profunda la hará el Controller.
     * @return Lista de Map.Entry<String, String> (IdAFN, TokenString), o null si hay error de validación.
     */
    public List<String> getSeleccionados() { // <-- MÉTODO CAMBIADO
        List<String> seleccion = new ArrayList<>();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Boolean seleccionado = (Boolean) tableModel.getValueAt(i, 3);
            if (seleccionado != null && seleccionado) {
                String idAFN = (String) tableModel.getValueAt(i, 0);
                seleccion.add(idAFN.trim());
            }
        }
        if (seleccion.isEmpty()) {
             JOptionPane.showMessageDialog(this,
                            "Debe seleccionar al menos un AFN (marcando la casilla).",
                            "Selección Vacía", JOptionPane.WARNING_MESSAGE);
             return null; // Indica error
        }
        return seleccion;
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AFD_Table;
    public javax.swing.JButton OKAFD_btn;
    public javax.swing.JButton OutAFD_btn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
